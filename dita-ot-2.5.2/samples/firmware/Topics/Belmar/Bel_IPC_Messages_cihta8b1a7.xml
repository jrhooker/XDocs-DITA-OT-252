<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.2 Topic//EN" "/SysSchema/dita/dtd/technicalContent/dtd/topic.dtd">
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" base="Princeton" id="IPC_Messages_cihta8b1a7" xml:lang="en-US">
  <title>Write Manager IPC Messages</title>

  <body>
    <p>The Write Manager sends and receives IPC messages
    from many of the managers and hardware functional units in the system.
    <xref href="#IPC_Messages_cihta8b1a7/IPC_Messages_cjhta8b1a7"/> describes the
    message types that are sent between these managers and functional
    units.</p>

    <table id="IPC_Messages_cjhta8b1a7" otherprops="type_size7">
      <title>IPC Messages</title>

      <tgroup cols="6">
        <colspec align="center" colname="A" colwidth=".2in"/>

        <colspec align="center" colname="B" colwidth=".6in"/>

        <colspec align="center" colname="C" colwidth=".8in"/>

        <colspec align="center" colname="D" colwidth=".8in"/>

        <colspec align="center" colname="E" colwidth=".8in"/>

        <colspec align="center" colname="F" colwidth=".8in"/>

        <thead>
          <row>
            <entry bg_color="#FFFFF" colsep="0" morerows="1"/>

            <entry bg_color="#FFFFF" morerows="1"/>

            <entry align="center" nameend="F" namest="C">Destination Manager</entry>
          </row>

          <row>
            <entry align="center">Write Manager</entry>

            <entry align="center">Journal
            Manager</entry>

            <entry align="center">Lookup
            Manager</entry>

            <entry bg_color="#FFE4B5">Flash
            Interface</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry bg_color="#DDDDDD" morerows="3" valign="middle"><p otherprops="rotate_text"><b>Source Manager</b></p></entry>

            <entry bg_color="#DDDDDD"><p><b>Write
            Manager</b></p></entry>

            <entry align="center"><p>N/A</p></entry>

            <entry><p>WriteSnapshotReq</p></entry>

            <entry align="center"><p>FlushCpl</p><p>ConfigDataOpCpl</p></entry>

            <entry><p>FlashWriteReq</p></entry>
          </row>

          <row>
            <entry bg_color="#DDDDDD"><p><b>Lookup
            Manager</b></p><p><b/></p></entry>

            <entry align="center"><p>PageFrameWrite</p><p>FlushReq</p><p>ConfigDataReadyReq</p></entry>

            <entry>N/A</entry>

            <entry/>

            <entry><p>N/A</p></entry>
          </row>

          <row>
            <entry bg_color="#DDDDDD"><b>Journal Manager</b></entry>

            <entry align="center">WriteSnapshotCpl</entry>

            <entry>N/A</entry>

            <entry/>

            <entry>N/A</entry>
          </row>

          <row>
            <entry bg_color="#FFE4B5"><p><b>Flash
            Interface</b></p></entry>

            <entry align="center"><p>N/A</p></entry>

            <entry>N/A</entry>

            <entry align="center"><p/></entry>

            <entry><p>N/A</p></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section id="ConfigDataReadyReq_ckhta8b1a7"><title>ConfigDataReadyReq</title><p>The
    Lookup Manager sends a ConfigDataReadyReq to the Write Manager to inform
    that the configuration data is valid in DDR. The Write Manager will read
    the appropriate configuration information, shown in <xref href="#IPC_Messages_cihta8b1a7/Configuration_Information_clhta8b1a7"/>,
    from the controller memory and store it in local variables for later use
    and then send a ConfigDataOpCpl message to the Lookup Manager.</p><table id="Configuration_Information_clhta8b1a7">
        <title>Configuration Information</title>

        <tgroup cols="1">
          <thead>
            <row>
              <entry>Configuration Information</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><p>Flash
              Configuration</p></entry>
            </row>

            <row>
              <entry><p>DDR Memory
              Map</p></entry>
            </row>

            <row>
              <entry><p>Sequence
              Number</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table></section>

    <section id="PageFrameWrite_RAIDPageFrameWrite_cmhta8b1a7"><title>PageFrameWrite</title><p>When a
    pageFrameWrite message is received, the Write Manager inserts controller
    metadata, generates a flash write message, and sends it to the flash
    interface. The Write Manager creates chained messages to the flash
    interface based on PageFrameWrite DWORD0 control information. A
    PageFrameWrite message control flow is shown in <xref href="#IPC_Messages_cihta8b1a7/PageFrameWrite_Control_Flow_cnhta8b1a7"/>.</p><fig id="PageFrameWrite_Control_Flow_cnhta8b1a7">
        <title>PageFrameWrite Control Flow</title>

        <image href="Graphics/bel_write_mgr_page_frame_write.svg" placement="break" width="5.5in"/>
      </fig> <table id="_cohta8b1a7">
        <title>PageFrameWrite Control Flow</title>

        <tgroup cols="3">
          <colspec colname="c1" colwidth="5*"/>

          <colspec colname="c2" colwidth="23*"/>

          <colspec colname="c3" colwidth="72*"/>

          <thead>
            <row>
              <entry>No.</entry>

              <entry>Operation</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><p> <b otherprops="bold">1</b> </p></entry>

              <entry><p> <b otherprops="bold">PageFrameWrite</b>
              </p></entry>

              <entry><p>The Lookup
              Manager sends a PageFrameWrite message to the Write Manager.
              </p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>Allocate
              flashWriteState structure. If there are no free state
              structures, mask inbound queue and return from poll function
              without poping the IPC message. Inbound queue is unmasked when
              one of flashWriteState structures are freed.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>The
              following information is extracted from the PageFrameWrite
              message:</p><ul>
                  <li id="d1e402"><p>Multi-plane begin - If set to 1, this
                  field shows that it is the 1st plane of a multi-plane
                  operation.</p></li>

                  <li id="d1e408"><p>Multi-plane end - If set to 1, this field
                  shows that it is the last plane of a multi-plane
                  operation.</p></li>

                  <li id="d1e414"><p>Reference ID - Differentiate commands
                  between different planes. Reference ID will be the same for
                  all PageFrameWrite message in a multi-plane
                  operation.</p></li>
                </ul></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>Except the
              last data frame, step 2 is repeated for all valid data frames in
              PageFrameWrite message.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">2</b> </p></entry>

              <entry><p> <b otherprops="bold">moveOutPosted</b>
              </p></entry>

              <entry><p>Write
              controller metadata to the data frame metadata location using
              moveoutposted.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">7</b> </p></entry>

              <entry><p> <b otherprops="bold">dataNetworkMoveOut</b> </p></entry>

              <entry><p>For last
              data frame, send data network moveout request to write the
              controller metadata.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">8</b> </p></entry>

              <entry><p> <b otherprops="bold">dataNetworkCpl</b>
              </p></entry>

              <entry><p>Data network
              responds with dataNetwokCpl for dataNetworkMoveOut.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>Process data
              network completion. If data network completion received with
              exception bit, Wearleveling Manager is halted with LOG_ERR.
              </p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>Process
              PageFrameWrite message control information.</p><ul>
                  <li><p>If first-plane
                  and last-plane bit is set, mark as single-plane
                  write.</p></li>

                  <li><p>If first-plane
                  bit is set and last-plane bit is clear, mark as first-plane
                  write.</p></li>

                  <li><p>If first-plane
                  and last-plane bits are clear, mark as middle-plane
                  write.</p></li>

                  <li><p>If first-plane
                  bit is clear and last-plane bit is set, mark as last-plane
                  write.</p></li>
                </ul></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>Get outbound
              buffer handle and write message data using
              IPCWriteData...()</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">internal
              Operation</b> </p></entry>

              <entry><p>If
              pageFrameWrite can’t fit into single flash write message, get
              another outbound buffer handle and write message data using
              IPCWriteData..();</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>If it is
              first-plane write, go to step 5 to post the message.</p><p>If it is first-plane write, wait for more
              pageFrameWrite messages.</p><p>If it is
              middle-plane write, link flashWriteState structure having same
              reference ID and wait for more pageFrameWrite messages.</p><p>If it is last-plane write, link
              flashWriteState structure having same reference ID. </p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>If number of
              plane to write is not even, get outbound buffer handle and write
              message data using IPCWriteData...() to write FF data to last
              plane.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">5</b> </p></entry>

              <entry><p> <b otherprops="bold">FlashWrite</b>
              </p></entry>

              <entry><p>Post
              flashWrite message to the flash interface. It is single message
              containing one or more chained messages.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">6</b> </p></entry>

              <entry><p> <b otherprops="bold">flashOpCpl</b>
              </p></entry>

              <entry><p>Flash
              interface responds with flashOpCpl for FlashWrite. Flash
              completions are directed to the Lookup Manager.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">NA</b> </p></entry>

              <entry><p> <b otherprops="bold">Internal
              Operation</b> </p></entry>

              <entry><p>Release
              flash write state structure.</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table></section>

    <section id="Flush_Request_cphta8b1a7"><title>Flush Request</title><p>The
    Lookup Manager sends a flush request to inform that the host has issued a
    shutdown to the device. The Write Manager issues a snapshot write request
    to the Journal Manager to save device control information (L2P table,
    block information etc). Upon receiving a snapshot write completion, it
    writes the current sequence number to the superblock and sends a flush
    completion to the Lookup Manager.</p></section>

    <section id="WriteSnapshot_Request_cqhta8b1a7"><title>WriteSnapshot Request</title><p>The Write Manager keeps track of the number of flash
    write requests sent to the flash interface. After writing 64 blocks worth
    of data (64 blocks on every virtual target), it will send a writeSnapshot
    request to the Journal Manager.</p></section>
  </body>
</topic>