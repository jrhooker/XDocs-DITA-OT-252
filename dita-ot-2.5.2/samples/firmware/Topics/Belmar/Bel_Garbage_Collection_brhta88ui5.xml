<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.2 Topic//EN" "/SysConfig/backup/dtd/technicalContent/dtd/topic.dtd">
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" base="Princeton" id="Garbage_Collection_brhta88ui5" xml:lang="en-US">
  <title>Garbage Collection</title>

  <body>
    <p>Garbage collection is triggered when the number of
    entries in the free block list drops below a low water mark threshold
    (LoTH) or an entry is added to the garbage block list. When garbage
    collection is triggered, it first checks whether the garbage block list is
    empty. If it is not empty, the block is removed from the head of the
    garbage block list and and all valid data frames are read. If the garbage
    block list is empty, the block is removed from the head of priority list
    [high priority]. <xref href="#Garbage_Collection_brhta88ui5/Remove_Entry_from_the_PriorityList_bshta88ui5"/>
    shows an example before and after an entry is removed from the priority
    list.</p>

    <fig id="Remove_Entry_from_the_PriorityList_bshta88ui5">
      <title>Remove Entry from the PriorityList</title>

      <image href="Graphics/clip_image032_b3iodpt.png" placement="break"/>
    </fig>

    <p>Garbage collection is performed one virtual page at
    a time; that is, all valid data frames in a virtual page are read at the
    same time, even though different physical blocks are involved. Garbage
    collection control flow is shown in <xref href="#Garbage_Collection_brhta88ui5/Garbage_Collection_Control_Flow_bthta88ui5"/>.</p>

    <fig id="Garbage_Collection_Control_Flow_bthta88ui5">
      <title>Garbage Collection Control Flow</title>

      <image href="Graphics/bel_garbage_coll.svg" placement="break" width="5.5in"/>
    </fig>

    <table id="_buhta88ui5">
      <title>Garbage Collection Control Flow</title>

      <tgroup cols="3">
        <colspec colname="c1" colwidth="5*"/>

        <colspec colname="c2" colwidth="25*"/>

        <colspec colname="c3" colwidth="70*"/>

        <thead>
          <row>
            <entry>No.</entry>

            <entry>Operation</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><p> <b otherprops="bold">IP1</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Set garbage
            collection active bit and increment gcActiveCount.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP2</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Check whether
            garbage block list is empty. If it is not empty, calculate garbage
            block list address to remove the block. If It is empty, calculate
            priority list address based on high priority index.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">1</b> </p></entry>

            <entry><p> <b otherprops="bold">ListOp</b>
            </p></entry>

            <entry><p>Send a message
            to the list engine to remove the block from either priority list
            or garbage block list.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">2</b> </p></entry>

            <entry><p> <b otherprops="bold">ListOpCpl</b>
            </p></entry>

            <entry><p>List Engine
            responds with listOpCpl for ListOp.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP3</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            operation</b> </p></entry>

            <entry><p>Process list
            engine completion. If the list operation completed successfully,
            get the block information address from the listOpCpl and go to
            step 3.</p> <p>If the list remove operation is
            done on garbage block list, list operation error indicates the
            garbage block list is empty. Mark garbage block list is empty and
            go to IP2. </p> <p>If the list remove operation
            is done on priority list, list operation error indicates the
            priority list [high priority index] is empty. Change priority
            index to next level and go to IP2. </p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">3</b> </p></entry>

            <entry><p> <b otherprops="bold">dataNetworkMoveIn</b>
            </p></entry>

            <entry><p>Send a data
            network movein request to read the block information from the
            controller memory.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">4</b> </p></entry>

            <entry><p> <b otherprops="bold">dataNetworkCpl</b>
            </p></entry>

            <entry><p>Data network
            responds with dataNetwokCpl for dataNetworkMoveIn</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP4</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Process data
            network completion. If data network completion received with
            exception bit, Wearleveling Manager is halted with LOG_ERR.
            </p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">5</b> </p></entry>

            <entry><p> <b otherprops="bold">moveOutPosted</b>
            </p></entry>

            <entry><p>Change block
            state to GARBAGE_COLLECTION and update in the controller memory
            using moveoutposted</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">6</b> </p></entry>

            <entry><p> <b otherprops="bold">BufferOpCpl</b>
            </p></entry>

            <entry><p>Get data frame
            buffer to read valid data frame from flash.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">7</b> </p></entry>

            <entry><p> <b otherprops="bold">BufferAlloc</b>
            </p></entry>

            <entry><p>Send prime
            buffer alloc request to get data frame buffer for future
            use.</p></entry>
          </row>

          <row>
            <entry/>

            <entry/>

            <entry><p>Since garbage
            collection will read all valid data frames in a virtual page at
            the same time, number of buffers allocated is equal to # of data
            frames in virtual page</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP5</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Calculate
            valid data frame bitmap address</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">8</b> </p></entry>

            <entry><p> <b otherprops="bold">dataNetworkMoveIn</b>
            </p></entry>

            <entry><p>Send a data
            network movein request to read valid data frame bitmap from the
            controller memory. Since there is not enough DRAM space to read
            complete valid data frame bitmap, it is processed as chunks (one
            or two virtual page bitmap). </p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">9</b> </p></entry>

            <entry><p> <b otherprops="bold">dataNetworkCpl</b>
            </p></entry>

            <entry><p>Data network
            responds with dataNetwokCpl for dataNetworkMoveIn.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP6</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Process data
            network completion. If data network completion received with
            exception bit, Wearleveling Manager is halted with LOG_ERR.
            </p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP7</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Process valid
            data frame bitmap. </p> <p>Calculate next valid
            virtual page number.</p> <p>Set number of data
            frame to be processed to number of valid data frames in virtual
            page.</p> </entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">10</b> </p></entry>

            <entry><p> <b otherprops="bold">FlashRead</b>
            </p></entry>

            <entry><p>Send a message
            to the flash interface to read valid data frames in a virtual
            page. Depending on number of valid data frames in virtual page,
            one or more FlashRead requests are sent to the flash
            interface.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">11</b> </p></entry>

            <entry><p> <b otherprops="bold">FlashOpCpl</b>
            </p></entry>

            <entry><p>Flash
            Interface responds with flashOpCpl for FlashRead.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP8</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Process flash
            interface completions. If there is no flash read error, go to step
            14 to continue with data frame processing. </p> </entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP9</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Update status
            in garbage collection state structure and go to step
            IP13.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">12</b> </p></entry>

            <entry><p> <b otherprops="bold">dataNetworkMoveIn</b>
            </p></entry>

            <entry><p>Send a data
            network movein request to read controller meta data from the data
            frame buffer.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">13</b> </p></entry>

            <entry><p> <b otherprops="bold">dataNetworkCpl</b>
            </p></entry>

            <entry><p>Data network
            responds with dataNetwokCpl for dataNetworkMoveIn.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP10</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Process data
            network completion. If data network completion received with
            exception bit, Wearleveling Manager is halted with LOG_ERR.
            </p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">14</b> </p></entry>

            <entry><p> <b otherprops="bold">dataNetworkMoveInAndLock</b> </p></entry>

            <entry><p>Extract
            logical address from controller meta data and send a data network
            movein and lock request to read lookup table entry from the
            controller memory.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">15</b></p></entry>

            <entry><p> <b otherprops="bold">dataNetworkCpl</b>
            </p></entry>

            <entry><p>Data network
            responds with dataNetwokCpl for dataNetworkMoveIn</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP11</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Process data
            network completion. If data network completion received with
            exception bit, Wearleveling Manager is halted with LOG_ERR. If
            lock is not granted, go to step 16 to re-issue
            dataNetworkMoveInAndLock.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP12</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Validate GC
            block flash address with lookup table entry flash address. If
            flash address doesn’t match, data frame is overwritten or
            obsoleted after garbage collection is activated on this block.
            Continue with step IP13. </p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">16</b> </p></entry>

            <entry><p> <b otherprops="bold">dataFrameWriteReq</b>
            </p></entry>

            <entry><p>Send a message
            to the Lookup Manager to write the data frame to the current
            active block and increment pendingDataFrameWriteCpl.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">17</b> </p></entry>

            <entry><p> <b otherprops="bold">dataFrameWriteCpl</b>
            </p></entry>

            <entry><p>The Lookup
            Manager responds with dataFrameWriteCpl for dataFrameWriteReq.</p>
            <note> <p>The
            Wearleveling Manager doesn’t wait for dataFrameWriteCpl. It
            continues to process the next virtual page bitmap. But It will
            make sure all completions are received before erasing the virtual
            block.</p> </note></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP13</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Decrement
            number of data fames to be processed.</p> <p>Check number of data frame to be processed is
            zero.</p> <p>If it is not zero, Wait for
            remaining data frames to be completed.</p> <p>It it is zero, current virtual page is
            completed and continue with IP14.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP14</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Check whether
            all valid data frames are moved from the current virtual block. If
            yes, continue with IP15. Otherwise go to step IP5.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP15</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Check whether
            pendingDataFrameWriteCpl is zero. If it is not zero, wait for
            dataFrameWriteCpl from the Lookup Manager.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">18</b> </p></entry>

            <entry><p> <b otherprops="bold">FlashErase</b>
            </p></entry>

            <entry><p>Send a message
            to the flash interface to erase virtual block. Depending on
            virtual block size, one or more flashErase requests are sent to
            the flash interface.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">19</b> </p></entry>

            <entry><p> <b otherprops="bold">FlashOpCpl</b>
            </p></entry>

            <entry><p>Flash
            Interface responds with flashOpCpl for FlashErase.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP16</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Process flash
            interface completions. If there is flash erase error, update
            virtual block bad block bitmap (clear bit for corresponding
            physical block).</p> <p>Wait for all flash
            erase completions for this virtual block before moving to the next
            step.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">20</b> </p></entry>

            <entry><p> <b otherprops="bold">moveOutPosted</b>
            </p></entry>

            <entry><p>Update bad
            block bitmap from grown bad block bitmap.</p> <p>Change block state to ERASED.</p> <p>Increment virtual block erase counter.</p> <p>Write block information to the controller
            memory using moveOutPosted.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">21</b> </p></entry>

            <entry><p> <b otherprops="bold">moveOutPosted</b>
            </p></entry>

            <entry><p>Write default
            valid data frame bitmap(all 1’s) to the controller memory using
            moveOutPosted.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">22</b> </p></entry>

            <entry><p> <b otherprops="bold">ListOp</b>
            </p></entry>

            <entry><p>Send a message
            to the List Engine to add virtual block to the free block
            list.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">23</b> </p></entry>

            <entry><p> <b otherprops="bold">ListOpCpl</b>
            </p></entry>

            <entry><p>List Engine
            responds with listOpCpl for ListOp.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">24</b> </p></entry>

            <entry><p> <b otherprops="bold">updateWriteCredits</b> </p></entry>

            <entry><p>Send a message
            to the Lookup Manager to update write credits.</p></entry>
          </row>

          <row>
            <entry><p> <b otherprops="bold">IP17</b> </p></entry>

            <entry><p> <b otherprops="bold">Internal
            Operation</b> </p></entry>

            <entry><p>Increment free
            block count for current virtual target. If virtual target free
            block count is above high GC threshold, stop Garbage collection.
            Otherwise go to step IP2 to garbage collect next virtual
            block.</p></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
</topic>