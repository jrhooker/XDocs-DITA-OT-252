<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA 1.2 Topic//EN" "/SysSchema/dita/dtd/technicalContent/dtd/topic.dtd">
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" base="Princeton" id="Control_Manager_Samsung_3xht98m7m5" xml:lang="en-US">
  <title><ph audience="PMCInternal">Samsung </ph>Control Manager</title>

  <body>
    <section id="Overview_Samsung_3yht98m7m5"><p>The Control Manager is a small extension of the
    secondary boot loader. Its main responsibility is to modify the
    Meta-Partition with any new firmware or system configuration information
    but it also continues the power-on sequence from the SBL.</p></section>

    <section id="IPC_Message_Interface_Samsung_3zht98m7m5"><title>IPC Message Interface</title><p>This manager can communicate with other managers
    necessary to bring up the system.</p><draft-comment translate="no">Add the xrefs to the table
    below once section 13 is edited and id refs set on the message
    names.</draft-comment><table id="table_IPC_Messages_40ht98m7m5">
        <title>IPC Messages</title>

        <tgroup cols="6">
          <colspec align="center" colname="A" colwidth=".2in"/>

          <colspec align="center" colname="B" colwidth=".6in"/>

          <colspec align="center" colname="C" colwidth=".8in"/>

          <colspec align="center" colname="D" colwidth=".8in"/>

          <colspec align="center" colname="E" colwidth=".8in"/>

          <colspec align="center" colname="F" colwidth=".8in"/>

          <thead>
            <row>
              <entry bg_color="#FFFFFF" colsep="0" morerows="1"/>

              <entry align="center" bg_color="#FFFFFF" morerows="1"> </entry>

              <entry align="center" nameend="F" namest="C">Destination
              Manager</entry>
            </row>

            <row bg_color="#DDDDDD">
              <entry><p>PCIe </p><p>Manager</p></entry>

              <entry><p>Admin </p><p>Command
              </p><p>Manager</p></entry>

              <entry><p>Control
              </p><p>Manager</p></entry>

              <entry bg_color="#FFE4B5"><p>Flash
              </p><p>Interface</p></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry bg_color="#DDDDDD" morerows="3"><p otherprops=" rotate_text "><b>Source Manager</b></p></entry>

              <entry bg_color="#DDDDDD"><p><b>PCIe
              </b></p><p><b>Manager</b></p></entry>

              <entry><p>N/A</p><p/><p/><p/><p/></entry>

              <entry>N/A</entry>

              <entry> ReloadFwReq</entry>

              <entry>N/A</entry>
            </row>

            <row>
              <entry bg_color="#DDDDDD"><p><b>Admin </b></p><p><b>Command </b></p><p><b>Manager </b></p></entry>

              <entry><p>N/A</p></entry>

              <entry><p>N/A</p></entry>

              <entry><p>PowerReq</p><p>PowerCpl</p><p>SetBadBlkReq</p><p>FwUpdtReq</p><p>WriteSuperBlkReq</p></entry>

              <entry><p>N/A</p></entry>
            </row>

            <row>
              <entry bg_color="#DDDDDD"><p><b>Control </b></p><p><b>Manager</b> </p></entry>

              <entry><p>ReloadFwCpl</p></entry>

              <entry><p>PowerReq</p><p>PowerCpl</p><p>SetBadBlkCpl</p><p>FwUpdtCpl</p><p>WriteSuperBlkCpl</p></entry>

              <entry><p>N/A</p></entry>

              <entry><p>FlashRead</p><p>FlashWrite</p><p>FlashErase</p></entry>
            </row>

            <row>
              <entry bg_color="#FFE4B5"><p><b>Flash </b></p><p><b>Interface</b></p></entry>

              <entry><p>N/A</p><p/><p/><p/><p/></entry>

              <entry><p>N/A</p></entry>

              <entry><p>FlashOpCpl</p></entry>

              <entry><p>N/A</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table></section>

    <section id="Power-On_Flow_Samsung_43ht98m7m5"><title>Power-On Flow</title><p>On power
    up, the SBL must read and install firmware into all processors including
    itself by directly accessing the Flash Interface (see <xref href="../Secondary_Boot_Loader_SBL__3oht7esfew.xml"/>).
    After this is complete, it will issue a re-initialization reset to the
    system. The Control Manager will then begin to execute. After completing
    its initialization, the Control Manager will release the run/stop signals
    to the other processors. The Control Manager then issues a power up
    request to the Admin Command Manager. The Admin Command Manager will
    complete the power up sequence (see <xref href="Sam_Power-On_Flow_ght97qqbj.xml"/>).</p><fig id="fig_Power-on_Control_Flow_Samsung_44ht98m7m5">
        <title>Power-on Control Flow</title>

        <image href="Graphics/Control Manager/Power_On_Flow.svg" placement="break" width="5.5in"/>
      </fig><table id="table_Power-on_Control_Flow_Samsung_45ht98m7m5">
        <title>Power-on Control Flow</title>

        <tgroup cols="3">
          <colspec colname="c1" colwidth="5*"/>

          <colspec colname="c2" colwidth="23*"/>

          <colspec colname="c3" colwidth="72*"/>

          <thead>
            <row>
              <entry>No.</entry>

              <entry>Message</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><p> <b otherprops="bold">1</b> </p></entry>

              <entry><p> <b otherprops="bold">FlashRead</b>
              </p></entry>

              <entry><p>The SBL
              issues a read request to the Flash Interface to read the
              superblock.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">2</b> </p></entry>

              <entry/>

              <entry><p>The Flash
              Interface reads the superblock from flash and stores it in
              controller memory. </p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">3</b> </p></entry>

              <entry><p> <b otherprops="bold">FlashOpCpl</b>
              </p></entry>

              <entry><p>The Flash
              Interface sends a completion message to the SBL.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">4</b> </p></entry>

              <entry><p> <b otherprops="bold">(re-initialization
              reset)</b> </p></entry>

              <entry><p>The SBL
              locates and loads the entire firmware image from flash into
              controller memory and then programs the appropriate firmware to
              each processor node.</p><p>The reset vector
              is then changed from ROM to internal RAM where the firmware was
              loaded by the SBL. Next, a re-initialization reset is issued to
              pass control to the Control Manager firmware.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">-</b> </p></entry>

              <entry/>

              <entry><p>Once the
              Control Manager has completed its initialization, it will
              release the run/stop signals to the other processor nodes, which
              then begin to run.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">5</b> </p></entry>

              <entry><p> <b otherprops="bold">PowerReq</b>
              </p></entry>

              <entry><p>The Control
              Manager sends the power up request to the Admin Command
              Manager.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">-</b> </p></entry>

              <entry/>

              <entry><p>The Admin
              Command Manager coordinates the rest of the power up sequence
              (refer to <xref href="Sam_Power-On_Flow_ght97qqbj.xml"/>).</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">6</b> </p></entry>

              <entry><p> <b otherprops="bold">PowerCpl</b>
              </p></entry>

              <entry><p>The Admin
              Command Manager sends the completion message to the Control
              Manager to indicate that the power on procedure is
              finished.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">7</b> </p></entry>

              <entry><p> <b otherprops="bold">FlashWrite</b>
              </p></entry>

              <entry><p>The Control
              Manager writes the superblock to the open state so that it can
              detect if the system is shut down properly or not.</p></entry>
            </row>

            <row>
              <entry><p> <b otherprops="bold">8</b> </p></entry>

              <entry><p> <b otherprops="bold">FlashOpCpl</b>
              </p></entry>

              <entry><p>The Flash
              Interface sends a completion message.</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table></section>

    <section id="Firmware_Update_Flow_Samsung_46ht98m7m5"><title>Firmware Update Flow</title><p>The PCIe may request a firmware update reset. When this
    happens, the Admin Command Manager will first shut down the system and
    then indicate to the Control Manager that this action is to take place.
    The Control Manager will:</p><ul>
        <li id="d1e592"><p>Set the DM
        sticky registers to indicate that this operation is
        occurring.</p></li>

        <li id="d1e598"><p>Jump to the
        secondary boot loader (SBL) portion of its instruction RAM to load the
        new firmware.</p></li>
      </ul><p>The secondary boot loader will jump straight
    to its firmware loading code and issue a reset when
    complete.</p></section>

    <section id="Factory_Programming_Power-On_Flow_Samsung_47ht98m7m5"><title>Factory Programming Power-On Flow</title><p>Earlier sections dealt with a functioning system.
    However, when the board is first assembled, it will not have the initial
    firmware program loaded into its flash and it may not even have the EEPROM
    programmed. The firmware will load through the PCIe interfaces as
    described below:</p><ol>
        <li><p>The BMODE pins are set
        to boot from EEPROM, even though it is empty.</p></li>

        <li><p>The PBL detects the
        empty EEPROM and opens up the PCIe config space for programming (see
        <xref href="../Primary_Boot_Loader_PBL__34ht7esfet.xml"/>
        for details).</p></li>

        <li><p>The EEPROM is programmed
        using the config space registers.</p></li>

        <li><p>A re-initialization
        request is issued using the config space registers. The PBL again
        tries to read the EEPROM and loads the data (like a normal
        boot).</p></li>

        <li><p>A re-initialization
        reset is issued at the end of the EEPROM image (like a normal
        boot).</p></li>

        <li><p>The secondary boot
        loader is called and fails to find a superblock (see <xref href="../Secondary_Boot_Loader_SBL__3oht7esfew.xml"/>
        for details). Eventually, it gives up and again opens up the PCIe
        interface for configuration.</p></li>

        <li><p>The host programs the
        metadata to flash by first writing it to memory and then sending a
        message to store it to the flash.</p></li>

        <li><p>At the end of this
        process, the host must reset the system and it can now boot
        normally.</p></li>
      </ol></section>
  </body>
</topic>